cmake_minimum_required(VERSION 2.6)

set(SRCDIR "src")
set(SRCEXT "cpp")

project(LGProject)
set(LIBRARY_OUTPUT_PATH lib/${CMAKE_BUILD_TYPE})


FIND_PACKAGE(OpenSceneGraph)
if (NOT IS_DIRECTORY OSG_LIBRARY)
	SET(OSG_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSG_LIBRARY)
if (NOT IS_DIRECTORY OSG_INCLUDE_DIR)
	SET(OSG_INCLUDE_DIR "/usr/local/include/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSG_INCLUDE_DIR)
FIND_PACKAGE(osgViewer)
if (NOT IS_DIRECTORY OSGVIEWER_LIBRARY)
	SET(OSGVIEWER_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSGVIEWER_LIBRARY)
FIND_PACKAGE(osgSim)
if (NOT IS_DIRECTORY OSGSIM_LIBRARY)
	SET(OSGSIM_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSGSIM_LIBRARY)
FIND_PACKAGE(osgText)
if (NOT IS_DIRECTORY OSGTEXT_LIBRARY)
	SET(OSGTEXT_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSGTEXT_LIBRARY)
FIND_PACKAGE(osgDB)
if (NOT IS_DIRECTORY OSGDB_LIBRARY)
	SET(OSGDB_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OSGDB_LIBRARY)
FIND_PACKAGE(Threads)
if (NOT IS_DIRECTORY OPENTHREADS_LIBRARY)
	SET(OPENTHREADS_LIBRARY "/usr/local/lib64/" CACHE PATH "default OSG directory" FORCE)
endif (NOT IS_DIRECTORY OPENTHREADS_LIBRARY)
FIND_PACKAGE(X11 REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)

file(
    GLOB_RECURSE
    source_files
    ${SRCDIR}/*.${SRCEXT}
)

add_executable(
    LGProject
    ${source_files}
)

include_directories(${OSG_INCLUDE_DIR})
	
target_link_libraries(
    LGProject
	${OPENSCENEGRAPH_LIBRARIES}
	${osgViewer_LIBRARIES}
	${osgSim_LIBRARIES}
	${osgText_LIBRARIES}
	${osgDB_LIBRARIES}
	${X11_LIBRARIES}
	${CMAKE_OPENGL_LIBS_INIT}
	${OPENTHREADS_LIBRARIES}
	m
	Xext
)